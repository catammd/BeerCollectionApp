
@keyframes draw-checkmark {
    0% {
        height: 0;
        width: 0;
        opacity: 1;
    }
    20% {
        height: 0;
        width: $checkmark-width;
        opacity: 1;
    }
    40% {
        height: $checkmark-height;
        width: $checkmark-width;
        opacity: 1;
    }
    100% {
        height: $checkmark-height;
        width: $checkmark-width;
        opacity: 1;
    }
}


.c-checkbox {
    display: block;
    margin-bottom: $spacing-s;
    position: relative;
}

.c-checkbox__input {
    // Hide the native checkbox, but don't remove it form the DOM to make sure tabbing works, styling goes on the label
    opacity: 0;
    position: absolute;
    left: 0;
    pointer-events: none;

    // Create the checkbox
    + .c-checkbox__label {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        line-height: normal;
        display: flex;
        align-items: center;
        position: relative;
        user-select: none;

        // Fake checkbox
        &::before {
            content: '';

            flex-shrink: 0;
            align-self: baseline;

            display: block;
            width: $fake-checkbox-size;
            height: $fake-checkbox-size;
            margin-right: $spacing-s;

            border: 1px $form-element-border-color solid;
            transition: border $base-transition-duration ease-in-out, background-color $base-transition-duration ease-in-out, box-shadow $base-transition-duration ease-in-out;
        }

        // Checkmark
        &::after {
            display: none;

            content: '';

            flex-shrink: 0;
            position: absolute;
            top: 10px;
            left: 4px;
            height: $checkmark-height;
            width: $checkmark-width;
            border-right: $checkmark-thickness solid $checkmark-color;
            border-top: $checkmark-thickness solid $checkmark-color;

            animation-duration: 0.4s;
            animation-timing-function: ease-in-out;
            transform: scaleX(-1) rotate(135deg);
            transform-origin: left top;
        }

        &:hover {
            &::before {
                box-shadow: 0 0 0 2px $color_brand2;
            }
        }
    }

    // Checked state
    &:checked {
        + .c-checkbox__label {
            &::before {
                border-color: $color-brand1;
                background-color: $color-brand1;
            }

            // Animate checkmark
            &::after {
                animation-name: draw-checkmark;
                display: block;
            }
        }
    }

    // Disabled state
    &:disabled {
        opacity: 0.5;

        + .c-checkbox__label {
            color: $color-shade3;
            cursor: not-allowed;

            &::before {
                border-color: $color-shade3;
                background-color: $color-shade4;
            }
            &::after {
                border-color: $color-shade3;
            }
        }
    }
}

// State when a checked checkbox has nested checkboxes and some are checked
.c-checkbox__input.c-checkbox__input--is-indeterminate {
    + .c-checkbox__label {
        &::before {
            border-color: $color-brand1;
            background-color: $color-brand1;
        }

        &::after {
            display: block;

            position: absolute;
            top: 8px;
            width: 0;

            animation-duration: 0s;
            transform: scaleX(-1) rotate(90deg);
        }
    }
}

// Focus
.c-checkbox__input:focus + .c-checkbox__label::before {
    box-shadow: 0 0 0 2px $color_brand2;
    outline: 1px solid transparent;
}